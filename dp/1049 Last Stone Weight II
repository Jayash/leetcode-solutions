class Solution {
    
    public int lastStoneWeightII(int[] stones) {
        if(stones == null || stones.length == 0) return 0;
        int sum = 0;
        
        for(int i:stones)
            sum += i;
        
        boolean dp[][] = new boolean[stones.length + 1][sum/2 + 1];
        
        dp[0][0] = true;
        int max = 0;
        for(int i=1; i<=stones.length; i++) {
            
            for(int j=0; j<= sum/2; j++) {
                if(j == 0) {
                    dp[i][j] = true;
                    continue;
                }
                if(stones[i-1] > j) {
                    dp[i][j] = dp[i-1][j];
                } else 
                    dp[i][j] = dp[i-1][j-stones[i-1]] || dp[i-1][j];
                
                if(dp[i][j]) {
                    max = Math.max(max, j);
                }
            }
        }
        
        return sum - (2*max);
        
    }
    
    /*
        dp[i][j] = dp[i-1][j-stones[i-1]] || dp[i-1][j];
    
       0 1 2 3 4 5 6 7 8 9 10 11
     0 t f f f f f f f f f  f  f
     2 t f t f f f f f f f  f  f
     7 t f t f f f f t f t  f  f
     4 t f t f t f t t f 
     1
     8
     1
     }
