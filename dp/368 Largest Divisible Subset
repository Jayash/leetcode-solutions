class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        
        if(nums.length == 0) return new ArrayList<Integer>();
        Arrays.sort(nums);
        int maxIdx = 0;
        int max = 1;
        
        int[] sequences = new int[nums.length];
        
        Arrays.fill(sequences, -1);
        int[] length = new int[nums.length];
        Arrays.fill(length, 1);
        
        for(int i=1; i< nums.length; i++) {
            for(int j=i-1; j>=0; j--) {
                if(nums[i] % nums[j] == 0) {
                    if(length[i] < length[j] + 1) {
                        sequences[i] = j;
                        length[i] = length[j] + 1;
                    }
                }
            }
            
            if(max < length[i]) {
                max = length[i];
                maxIdx = i;
            }
        }
        
        return buildSequence(maxIdx, sequences, nums);
    }
    
    public List<Integer> buildSequence(int maxIdx, int[] sequences, int[] nums) {
        List<Integer> ans = new ArrayList<>();
        while(maxIdx != -1) {
            ans.add(0, nums[maxIdx]);
            maxIdx = sequences[maxIdx];
        }
        return ans;
    }
}
